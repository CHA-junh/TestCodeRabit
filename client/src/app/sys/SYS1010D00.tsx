/**
 * SYS1010D00 - ?ÑÎ°úÍ∑∏Îû® Í≤Ä???ùÏóÖ ?îÎ©¥
 *
 * Ï£ºÏöî Í∏∞Îä•:
 * - ?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Ï°∞Ìöå Î∞?Í≤Ä??
 * - ?ÑÎ°úÍ∑∏Îû® ?§Ï§ë/?®Ïùº ?†ÌÉù
 * - ?†ÌÉù???ÑÎ°úÍ∑∏Îû®??Î∂ÄÎ™??îÎ©¥?ºÎ°ú ?ÑÎã¨
 * - ?ùÏóÖ ?ïÌÉúÎ°??ôÏûë?òÏó¨ Î∂ÄÎ™??îÎ©¥Í≥?Î∂ÑÎ¶¨
 *
 * API ?∞Îèô:
 * - GET /api/sys/programs - ?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Ï°∞Ìöå
 * - POST /api/common/search - Í≥µÌÜµÏΩîÎìú Ï°∞Ìöå (?ÑÎ°úÍ∑∏Îû®Íµ¨Î∂Ñ: 305, ?ÖÎ¨¥Íµ¨Î∂Ñ: 303)
 *
 * ?ÅÌÉú Í¥ÄÎ¶?
 * - ?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î∞??†ÌÉù???ÑÎ°úÍ∑∏Îû®??
 * - Í≤Ä??Ï°∞Í±¥ (?ÑÎ°úÍ∑∏Îû®?§Ïõå?? ?ÑÎ°úÍ∑∏Îû®Íµ¨Î∂Ñ, ?ÖÎ¨¥Íµ¨Î∂Ñ)
 * - Î°úÎî© ?ÅÌÉú Î∞??ùÏóÖ ?úÏñ¥
 *
 * ?¨Ïö©???∏ÌÑ∞?òÏù¥??
 * - Í≤Ä??Ï°∞Í±¥ ?ÖÎ†• (?ÑÎ°úÍ∑∏Îû®?§Ïõå?? ?ÑÎ°úÍ∑∏Îû®Íµ¨Î∂Ñ, ?ÖÎ¨¥Íµ¨Î∂Ñ)
 * - ?ÑÎ°úÍ∑∏Îû® Î™©Î°ù ?åÏù¥Î∏?(AG-Grid)
 * - Ï≤¥ÌÅ¨Î∞ïÏä§ ?§Ï§ë ?†ÌÉù (multiple=true??Í≤ΩÏö∞)
 * - ?îÎ∏î?¥Î¶≠ ?®Ïùº ?†ÌÉù
 * - ?†ÌÉù/Ï∑®ÏÜå/?´Í∏∞ Î≤ÑÌäº
 *
 * ?∞Í? ?îÎ©¥:
 * - SYS1001M00: ?ÑÎ°úÍ∑∏Îû® Í∑∏Î£π Í¥ÄÎ¶?(?ÑÎ°úÍ∑∏Îû® Ï∂îÍ?)
 * - SYS1002M00: Î©îÎâ¥Î≥??ÑÎ°úÍ∑∏Îû® Í¥ÄÎ¶?(?ÑÎ°úÍ∑∏Îû® ?∞Í≤∞)
 * - SYS1000M00: ?ÑÎ°úÍ∑∏Îû® Í¥ÄÎ¶?(?ÑÎ°úÍ∑∏Îû® ?ïÎ≥¥)
 *
 * ?∞Ïù¥??Íµ¨Ï°∞:
 * - Program: ?ÑÎ°úÍ∑∏Îû® ?ïÎ≥¥ (PGM_ID, PGM_NM, PGM_DIV_CD, BIZ_DIV_CD, USE_YN ??
 * - SYS1010D00Props: ?ùÏóÖ ?çÏÑ± (onSelect, multiple)
 *
 * ?πÏù¥?¨Ìï≠:
 * - ?ùÏóÖ ?ïÌÉúÎ°??ôÏûë?òÏó¨ Î∂ÄÎ™??îÎ©¥?êÏÑú ?∏Ï∂ú
 * - URL ?åÎùºÎØ∏ÌÑ∞Î•??µÌïú Ï¥àÍ∏∞ ?§Ï†ï (PGM_ID, PGM_GRP_ID)
 * - ?§Ï§ë ?†ÌÉù/?®Ïùº ?†ÌÉù Î™®Îìú ÏßÄ??
 * - ?†ÌÉù???ÑÎ°úÍ∑∏Îû®?Ä Î∂ÄÎ™??îÎ©¥??ÏΩúÎ∞± ?®ÏàòÎ°??ÑÎã¨
 * - ?îÎ∏î?¥Î¶≠ ??Ï¶âÏãú ?†ÌÉù ?ÑÎ£å
 * - Ï≤¥ÌÅ¨Î∞ïÏä§ ?†ÌÉù ???§Ï§ë ?†ÌÉù Í∞Ä??
 *
 * ?¨Ïö© ?àÏãú:
 * - SYS1001M00?êÏÑú ?ÑÎ°úÍ∑∏Îû® Í∑∏Î£π???ÑÎ°úÍ∑∏Îû® Ï∂îÍ? ??
 * - SYS1002M00?êÏÑú Î©îÎâ¥???ÑÎ°úÍ∑∏Îû® ?∞Í≤∞ ??
 * - Í∏∞Ì? ?ÑÎ°úÍ∑∏Îû® ?†ÌÉù???ÑÏöî??Î™®Îì† ?îÎ©¥
 */
'use client';

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { cn } from '@/lib/utils';
import { AgGridReact } from 'ag-grid-react';
import { ColDef, SelectionChangedEvent, GridReadyEvent } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import '../common/common.css';
import { useToast } from '@/contexts/ToastContext';

interface Program {
  PGM_ID: string;
  PGM_NM: string;
  PGM_DIV_CD: string;
  BIZ_DIV_CD: string;
  USE_YN: string;
  SORT_SEQ?: number;
}

interface SYS1010D00Props {
  onSelect?: (selectedPrograms: Program[]) => void;
  multiple?: boolean;
}

export default function SYS1010D00({ onSelect, multiple = true }: SYS1010D00Props) {
  const { showToast } = useToast();
  const [programs, setPrograms] = useState<Program[]>([]);
  const [selectedPrograms, setSelectedPrograms] = useState<Program[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchParams, setSearchParams] = useState({
    PGM_KWD: '',
    PGM_DIV_CD: '',
    BIZ_DIV_CD: ''
  });

  // URL ?åÎùºÎØ∏ÌÑ∞?êÏÑú PGM_ID Í∞Ä?∏Ïò§Í∏?
  const [popupPgmId, setPopupPgmId] = useState<string | null>(null);
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    setPopupPgmId(urlParams.get('PGM_ID'));
  }, []);

  // AG-Grid Í¥Ä??
  const gridRef = useRef<AgGridReact>(null);

  // AG-Grid Ïª¨Îüº ?ïÏùò
  const columnDefs: ColDef[] = [
    ...(multiple ? [{
      headerName: '',
      field: 'checkbox',
      width: 60,
      checkboxSelection: true,
      headerCheckboxSelection: true,
      pinned: 'left' as const,
      cellStyle: { textAlign: 'center' },
      headerClass: 'ag-center-header',
    }] : []),
    {
      headerName: '?ÑÎ°úÍ∑∏Îû®ID',
      field: 'PGM_ID',
      flex: 1,
      minWidth: 120,
      sortable: true,
      filter: true
    },
    {
      headerName: '?ÑÎ°úÍ∑∏Îû®Î™?,
      field: 'PGM_NM',
      flex: 2,
      minWidth: 180,
      sortable: true,
      filter: true,
      cellStyle: { textAlign: 'left' }
    },
    {
      headerName: 'Íµ¨Î∂Ñ',
      field: 'PGM_DIV_NM',
      flex: 1,
      minWidth: 80,
      sortable: true,
      filter: true
    },
    {
      headerName: '?ÖÎ¨¥',
      field: 'BIZ_DIV_CD',
      flex: 1,
      minWidth: 80,
      sortable: true,
      filter: true
    }
  ];

  // ?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î°úÎìú
  const loadPrograms = useCallback(async (params?: any) => {
    console.log('loadPrograms ?∏Ï∂ú?? ?åÎùºÎØ∏ÌÑ∞:', params);
    setLoading(true);
    try {
      // URL ?åÎùºÎØ∏ÌÑ∞?êÏÑú PGM_GRP_ID Í∞Ä?∏Ïò§Í∏?
      const urlParams = new URLSearchParams(window.location.search);
      const pgmGrpId = urlParams.get('PGM_GRP_ID');
      
      // API ?∏Ï∂ú???ÑÌïú ÏøºÎ¶¨ ?åÎùºÎØ∏ÌÑ∞ Íµ¨ÏÑ±
      const queryParams = new URLSearchParams();
      if (params?.PGM_KWD) queryParams.append('PGM_KWD', params.PGM_KWD);
      if (params?.PGM_DIV_CD) queryParams.append('PGM_DIV_CD', params.PGM_DIV_CD);
      if (params?.BIZ_DIV_CD) queryParams.append('BIZ_DIV_CD', params.BIZ_DIV_CD);
      if (pgmGrpId) queryParams.append('PGM_GRP_ID', pgmGrpId);
      
      const response = await fetch(`/api/sys/programs/search?${queryParams.toString()}`);
      const result = await response.json();
      
      if (result.success) {
        setPrograms(result.data);
        // ?∞Ïù¥??Î°úÎìú ??Ïª¨Îüº ?êÎèô ÎßûÏ∂§
        setTimeout(() => {
          if (gridRef.current && gridRef.current.api) {
            gridRef.current.api.sizeColumnsToFit();
          }
        }, 0);
      } else {
        console.error('?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î°úÎìú ?§Ìå®:', result.message);
        showToast(`?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î°úÎìú ?§Ìå®: ${result.message}`, 'error');
      }
    } catch (error: any) {
      console.error('?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î°úÎìú ?§Ìå®:', error);
      showToast(`?ÑÎ°úÍ∑∏Îû® Î™©Î°ù Î°úÎìú ?§Ìå®: ${error?.message || '?????ÜÎäî ?§Î•ò'}`, 'error');
    } finally {
      setLoading(false);
    }
  }, []);

  // Ï¥àÍ∏∞ Î°úÎìú
  useEffect(() => {
    loadPrograms(searchParams);
  }, []);

  // Í≤Ä??Î≤ÑÌäº ?¥Î¶≠
  const handleSearch = () => {
    console.log('Ï°∞Ìöå Î≤ÑÌäº ?¥Î¶≠??);
    console.log('Í≤Ä???åÎùºÎØ∏ÌÑ∞:', searchParams);
    loadPrograms(searchParams);
  };

  // AG-Grid ?¥Î≤§???∏Îì§??
  const onSelectionChanged = (event: SelectionChangedEvent) => {
    const selectedRows = event.api.getSelectedRows();
    setSelectedPrograms(selectedRows);
  };

  const onGridReady = (event: GridReadyEvent) => {
    event.api.sizeColumnsToFit();
  };

  // ???îÎ∏î?¥Î¶≠ ?∏Îì§??
  const handleRowDoubleClick = (event: any) => {
    const row = event.data;
    if (!row) return;
    // Î∂ÄÎ™?Ï∞ΩÏóê Î©îÏãúÏßÄ ?ÑÏÜ° (?ùÏóÖ??Í≤ΩÏö∞)
    if (window.opener) {
      const messageData = {
        type: 'SELECTED_PROGRAMS',
        data: [row],
        PGM_ID: popupPgmId // ?ùÏóÖ?êÏÑú Î∞õÏ? PGM_ID???®Íªò Î≥¥ÎÉÑ
      };
      window.opener.postMessage(messageData, '*');
      window.close();
    }
    // onSelect ÏΩúÎ∞±???∏Ï∂ú (?µÏÖò)
    if (onSelect) {
      onSelect([row]);
    }
  };

  // Ï∂îÍ? Î≤ÑÌäº ?¥Î¶≠
  const handleAdd = () => {
    console.log('=== Ï∂îÍ? Î≤ÑÌäº ?¥Î¶≠ ===');
    console.log('?†ÌÉù???ÑÎ°úÍ∑∏Îû® Í∞úÏàò:', selectedPrograms.length);
    console.log('?†ÌÉù???ÑÎ°úÍ∑∏Îû® ?∞Ïù¥??', selectedPrograms);
    
    if (selectedPrograms.length === 0) {
      showToast('Ï∂îÍ????ÑÎ°úÍ∑∏Îû®???†ÌÉù?¥Ï£º?∏Ïöî.', 'warning');
      return;
    }

    if (onSelect) {
      console.log('onSelect ÏΩúÎ∞± ?∏Ï∂ú');
      onSelect(selectedPrograms);
    }

    // Î∂ÄÎ™?Ï∞ΩÏóê Î©îÏãúÏßÄ ?ÑÏÜ° (?ùÏóÖ??Í≤ΩÏö∞)
    if (window.opener) {
      const messageData = {
        type: 'SELECTED_PROGRAMS',
        data: selectedPrograms,
        PGM_ID: popupPgmId // Ï∂îÍ?: ?ùÏóÖ?êÏÑú Î∞õÏ? PGM_ID???®Íªò Î≥¥ÎÉÑ
      };
      console.log('Î∂ÄÎ™?Ï∞ΩÏúºÎ°??ÑÏÜ°??Î©îÏãúÏßÄ:', messageData);
      window.opener.postMessage(messageData, '*');
      console.log('Î∂ÄÎ™?Ï∞ΩÏúºÎ°?Î©îÏãúÏßÄ ?ÑÏÜ° ?ÑÎ£å');
      window.close();
    }
  };

  // ?ùÏóÖ ?´Í∏∞
  const handleClose = () => {
    if (window.opener) {
      window.close();
    }
  };

  return (
    <div className='mdi' style={{ width: '850px', height: '430px', padding: '8px', minWidth: '850px' }}>
      {/* ?îç Ï°∞Ìöå ?ÅÏó≠ */}
      <div className='search-div mb-2'>
        <table className='search-table w-full'>
          <tbody>
            <tr className='search-tr'>
              <th className='search-th w-[90px]'>?ÑÎ°úÍ∑∏Îû® IDÎ™?/th>
              <td className='search-td w-[120px]'>
                <input
                  type='text'
                  className='input-base input-default w-full'
                  value={searchParams.PGM_KWD}
                  onChange={(e) => setSearchParams(prev => ({ ...prev, PGM_KWD: e.target.value }))}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  aria-label='?ÑÎ°úÍ∑∏Îû® IDÎ™??ÖÎ†•'
                />
              </td>
              <th className='search-th w-[60px]'>Íµ¨Î∂Ñ</th>
              <td className='search-td w-[80px]'>
                <select
                  className='combo-base w-full'
                  value={searchParams.PGM_DIV_CD}
                  onChange={(e) => setSearchParams(prev => ({ ...prev, PGM_DIV_CD: e.target.value }))}
                  aria-label='Íµ¨Î∂Ñ ?†ÌÉù'
                >
                  <option value="">?†ÌÉù</option>
                  <option value="?îÎ©¥">?îÎ©¥</option>
                  <option value="?ùÏóÖ">?ùÏóÖ</option>
                </select>
              </td>
              <th className='search-th w-[60px]'>?ÖÎ¨¥</th>
              <td className='search-td w-[80px]'>
                <select
                  className='combo-base w-full'
                  value={searchParams.BIZ_DIV_CD}
                  onChange={(e) => setSearchParams(prev => ({ ...prev, BIZ_DIV_CD: e.target.value }))}
                  aria-label='?ÖÎ¨¥ ?†ÌÉù'
                >
                  <option value="">?†ÌÉù</option>
                  <option value="?ÖÎ¨¥">?ÖÎ¨¥</option>
                  <option value="?úÏä§??>?úÏä§??/option>
                </select>
              </td>
              <td className='search-td text-right w-[60px]'>
                <button type='button' className='btn-base btn-search text-xs px-2 py-1' onClick={handleSearch}>
                  Ï°∞Ìöå
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* ?ìã ?Ä?¥Ì? */}
      <div className='tit_area mb-1'>
        <h3 className='text-sm'>?ÑÎ°úÍ∑∏Îû®Î™©Î°ù</h3>
      </div>

      {/* ?ìä AG-Grid ?ÅÏó≠ */}
      <div className='gridbox-div mb-2'>
        <div className='ag-theme-alpine' style={{ height: '300px', width: '100%' }}>
          <AgGridReact
            ref={gridRef}
            rowData={programs}
            columnDefs={columnDefs}
            rowSelection={multiple ? 'multiple' : 'single'}
            onSelectionChanged={onSelectionChanged}
            onGridReady={onGridReady}
            loadingOverlayComponent={() => <div>Î°úÎî© Ï§?..</div>}
            noRowsOverlayComponent={() => <div>Ï°∞Ìöå???ïÎ≥¥Í∞Ä ?ÜÏäµ?àÎã§.</div>}
            suppressRowClickSelection={false}
            animateRows={true}
            pagination={false}
            domLayout="autoHeight"
            onRowDoubleClicked={handleRowDoubleClick}
            data-testid="program-search-grid"
          />
        </div>
      </div>

      {/* ‚¨??òÎã® Î≤ÑÌäº */}
      <div className='flex justify-end gap-2 mt-2'>
        {onSelect && (
          <button type='button' className='btn-base btn-etc text-xs px-2 py-1' onClick={handleClose}>
            Ï∑®ÏÜå
          </button>
        )}
        <button type='button' className='btn-base btn-act text-xs px-2 py-1' onClick={handleAdd}>
          {multiple ? 'Ï∂îÍ?' : '?†ÌÉù'}
        </button>
      </div>
    </div>
  );
} 

